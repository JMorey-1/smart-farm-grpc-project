// robot.proto
// Proto file for managing autonomous farming robots
// Defines a bidirectional gRPC stream for sending commands and receiving live robot status updates

syntax = "proto3";

package robot;

service RobotService {
  // Bidirectional stream:
  // - Client sends RobotCommand messages (e.g. Start, Pause, Resume, Return)
  // - Server responds with live RobotStatusResponse messages (position, task, battery, etc.)
  rpc RobotCommandStream (stream RobotCommand) returns (stream RobotStatusResponse);
}

// Message sent from the client to control robot behavior
message RobotCommand {
  string robotId = 1;      // ID of the robot to control
  string command = 2;      // Command to send: "start", "pause", "resume", "return"
}

// Message streamed back from the server with robot status updates
message RobotStatusResponse {
  string robotId = 1;             // Unique identifier for the robot
  string position = 2;            // Current position (e.g., "Warehouse", "Greenhouse 1")
  string currentTask = 3;         // Task currently being performed (e.g., "Picking")
  float containerLoadPercent = 4; // Harvest container fullness (0–100%)
  float batteryLevelPercent = 5;  // Battery level (0–100%)
  string timestamp = 6;           // Timestamp of the update (ISO 8601 format)
}